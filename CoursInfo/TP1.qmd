---
title: TP 1 Boucles, recherche linéaire, listes et dictionnaires
jupyter: python3
---



### Exercice 1 : Recherche d'un élément dans une liste.  
Écrire une fonction Python intitulée recherche_lineaire qui prend en entrée un tableau d'entiers
tab et un entier e et renvoie True si l'entier e est présent dans le tableau et False sinon.

***Exemples :***  
\>>> tab = [5,3,9,10]  
\>>> e = 1  
\>>> recherche_lineaire(tab,e)  
False  
\>>> tab = [5,3,9,10]  
\>>> e = 9  
\>>> recherche_lineaire(tab,e)  
True  


### Exercice 2 : Recherche d'un élément dans une liste et renvoi de l'indice de la première occurence de cet élément
Écrire une fonction Python intitulée recherche_lineaire2 qui prend en entrée un tableau d'entiers tab et un entier e et renvoie l'indice de la première occurence de cet entier s'il est présent dans le tableau et -1 sinon.  

***Exemples :***    
\>>> tab = [5,3,9,10]  
\>>> e = 1  
\>>> recherche_lineaire2(tab,e)  
-1  
\>>> tab = [5,3,9,10]  
\>>> e = 9  
\>>> recherche_lineaire2(tab,e)  
2  
\>>> tab = [3,10,11,10]  
\>>> e = 10  
\>>> recherche_lineaire2(tab,e)  
1 


### Exercice 3 : Recherche du plus grand élément d'une liste et renvoi de la valeur de ce maximum

Écrire la fonction maximum_tableau, prenant en paramètre un tableau non vide de nombres tab (de type list) et renvoyant le plus grand élément de ce tableau.  
***Exemples :***   
\>>> maximum_tableau([98, 12, 104, 23, 131, 9])  
131  
\>>> maximum_tableau([-27, 24, -3, 15])  
24  


### Exercice 4 : Recherche du plus grand élément d'une liste et renvoi de la valeur et de l'indice de la première occurence du maximum

Écrire une fonction max_et_indice qui prend en paramètre un tableau non vide tab (type Python list) de nombres entiers et qui renvoie la valeur du plus grand élément de ce tableau ainsi que l’indice de sa première apparition dans ce tableau.  
L’utilisation de la fonction native max n’est pas autorisée.  
***Exemples :***      
\>>> max_et_indice([1, 5, 6, 9, 1, 2, 3, 7, 9, 8])  
(9, 3)  
\>>> max_et_indice([-2])  
(-2, 0)  
\>>> max_et_indice([-1, -1, 3, 3, 3])  
(3, 2)  
\>>> max_et_indice([1, 1, 1, 1])  
(1, 0)  


### Exercice 5 : Recherche du plus grand élément d'une liste et renvoi de la valeur et de la liste des indices de toutes les occurences du maximum

Écrire une fonction indices_maxi qui prend en paramètre un tableau non vide de nombre entiers tab, représenté par une liste Python et qui renvoie un tuple (maxi, indices) où :  
• maxi est le plus grand élément du tableau tab ;  
• indices est une liste Python contenant les indices du tableau tab où apparaît ce plus grand élément.  
Exemple :  
\>>> indices_maxi([1, 5, 6, 9, 1, 2, 3, 7, 9, 8])  
(9, [3, 8])  
\>>> indices_maxi([7])  
(7, [0])  


### Exercice 6  : Recherche du second maximum
Écrire une fonction second_maximum qui prend en paramètre un tableau de nombres entiers tab comportant au moins 2 éléments (type Python list) et qui renvoie le deuxième plus grand élément du tableau. On supposera tous les éléments du tableau différents pour simplifier.  
***Exemples :***  
\>>>> second_maximum([8,7,15,13,10,17])  
15  
\>>>> second_maximum([8,7,5,3,10,1])  
8  
\>>> second_maximum([2, 1])  
1


### Exercice 7 : Comptage des éléments d’un tableau à l’aide d’un dictionnaire  
Écrire une fonction dico_comptage qui prend en paramètre un tableau d'entiers tab (type Python list) et qui renvoie un dictionnaire dont les clés sont les entiers présents dans le tableau et les valeurs leurs nombres d'occurences dans le tableau.  
***Exemples :***  
\>>> dico_comptage([5,5])  
{ 5 : 2 }  
\>>> dico_comptage([5,3,6,3,5,3,3])  
{ 5 : 2 , 3 : 4 , 6 : 1 }  
\>>> dico_comptage([8,8,8,2,4,4,4,4])   
{ 8 : 3, 2 : 1 , 4 : 4 }  
\>>>  


### Exercice 8 : Comptage d'occurences de caractère dans une chaîne à l'aide d'un dictionnaire
Le nombre d’occurrences d’un caractère dans une chaîne de caractère est le nombre d’apparitions de ce caractère dans la chaîne.  
***Exemples :***    
• le nombre d’occurrences du caractère 'o' dans 'bonjour' est 2 ;  
• le nombre d’occurrences du caractère 'b' dans 'Bébé' est 1 ;  
• le nombre d’occurrences du caractère 'B' dans 'Bébé' est 1 ;  
• le nombre d’occurrences du caractère ' ' dans 'Hello world !' est 2.  
On cherche les occurrences des caractères dans une phrase. On souhaite stocker ces occurrences dans un dictionnaire dont les clefs seraient les caractères de la phrase et les valeurs l’occurrence de ces caractères.  
Par exemple : avec la phrase 'Hello world !' le dictionnaire est le suivant :    
{'H': 1,'e': 1,'l': 3,'o': 2,' ': 2,'w': 1,'r': 1,'d': 1,'!': 1}  
L’ordre des clefs n’a pas d’importance.  
Écrire une fonction nbr_occurrences prenant comme paramètre une chaîne de caractères chaine et renvoyant le dictionnaire des nombres d’occurrences des caractères de cette chaîne.  


### Exercice 9 : Dictionnaire des occurences des éléments d'une liste
Écrire une fonction dico_occurences qui prend en paramètre un tableau d'entiers tab (type Python list) et qui renvoie un dictionnaire dont les clés sont les entiers présents dans le tableau, et pour chacune de ces clés, la valeur associée est la liste de tous les indices de ses occurences dans le tableau tab.  
***Exemples :***  
\>>> dico_occurences([5,5])  
{5 : [0,1]}  
\>>> dico_occurences([1,5,5,5])  
{1 : [0], 5 : [1,2,3] }  
\>>> dico_occurences([3,3,7,5,2,5,3,4,7])  
{3 : [0,1,6], 7 : [2,8], 5 : [3] , 2 : [4] , 4 : [7]}  
\>>>


### Exercice 10 : Recherche d'un motif dans une chaîne
Écrire une fonction recherche_motif qui prend en paramètre une chaîne de caractères motif non vide et une chaîne de caractères texte et qui renvoie la liste des positions de motif dans texte. Si motif n’apparaît pas, la fonction renvoie une liste vide.  
***Exemples :***  
\>>> recherche_motif("ab", "")  
[]  
\>>> recherche_motif("ab", "cdcdcdcd")  
[]  
\>>> recherche_motif("ab", "abracadabra")  
[0, 7]  
\>>> recherche_motif("ab", "abracadabraab")  
[0, 7, 11]  


